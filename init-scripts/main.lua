------------------------------------------------------------------------------
-- Main file with the definitions of all the service functions used by      --
-- other scripts.                                                           --
--                                                                          --
-- DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING!                --
------------------------------------------------------------------------------

-- global table with the information about all the available terrain types
-- used from ufo2000 executable
TerrainTable = {}

-- directories for data files from the original x-com and ufo2000
xcomdemo_dir = xcom_dir or xcomdemo_dir or "."
xcom_dir     = xcom_dir or "."
tftddemo_dir = tftd_dir or tftddemo_dir or "."
tftd_dir     = tftd_dir or "."
ufo2000_dir  = ufo2000_dir or "."
home_dir     = home_dir or "."

-- clear init-scripts.log
local fh = io.open(home_dir .. "/init-scripts.log", "wt") fh:close()

function Error(...)
	local msg = string.format(unpack(arg))
	local fh = io.open(home_dir .. "/init-scripts.log", "at")
	fh:write(msg, "\n")
	fh:close()
	error(msg)
end

function Warning(...)
	local msg = string.format(unpack(arg))
	local fh = io.open(home_dir .. "/init-scripts.log", "at")
	fh:write(msg, "\n")
	fh:close()
	print(msg)
end

function Message(...)
	local msg = string.format(unpack(arg))
	local fh = io.open(home_dir .. "/init-scripts.log", "at")
	fh:write(msg, "\n")
	fh:close()
	print(msg)
end

-- reads the whole file content into a string
local function ReadFile(filename)
	local f = io.open(filename, "rb")
	if f == nil then return nil end
	local data = f:read("*a")
	f:close()
	return data
end

-- finds path to data file expanding prefixes and trying different 
-- file name case
local function LocateFile(filename)
	filename = string.gsub(filename, "^%$%(xcom%)", xcom_dir)
	filename = string.gsub(filename, "^%$%(xcomdemo%)", xcomdemo_dir)
	filename = string.gsub(filename, "^%$%(tftd%)", tftd_dir)
	filename = string.gsub(filename, "^%$%(tftddemo%)", tftddemo_dir)
	filename = string.gsub(filename, "^%$%(ufo2000%)", ufo2000_dir)

	local fh = io.open(filename, "rb")
	if fh then fh:close() return filename end

	local fh = io.open(string.lower(filename), "rb")
	if fh then fh:close() return string.lower(filename) end

	local fh = io.open(string.upper(filename), "rb")
	if fh then fh:close() return string.upper(filename) end

	return filename
end

-- adds a new map file to a terrain record
local function AddXcomMap(ti, map_filename)
	local _, _, map_id = string.find(string.lower(map_filename), "(%d+)%.map$")
	if not map_id then
		return string.format("invalid map file name '%s'", map_filename)
	end

	map_id = tonumber(map_id)

	local map_data = ReadFile(map_filename)
	if map_data == nil then
		return string.format("can't open '%s'", map_filename)
	end
	local size_x = string.byte(map_data, 1)
	local size_y = string.byte(map_data, 2)
	local size_z = string.byte(map_data, 3)
	if 3 + size_x * size_y * size_z * 4 ~= string.len(map_data) then
		return string.format("invalid data format in '%s'", map_filename)
	end
	ti.Crc32 = UpdateCrc32(ti.Crc32, map_id)
	ti.Crc32 = UpdateCrc32(ti.Crc32, map_data)
	ti.Maps[map_id] = map_filename

	return nil
end

-- adds new terrain
function AddXcomTerrain(terrain)
	if TerrainTable[terrain.Index] then
		Warning("AddXcomTerrain: terrains '%s' and '%s' share the same index %d - '%s' will not be used", 
			TerrainTable[terrain.Index].Name, terrain.Name, terrain.Index, terrain.Name) 
		return nil
	end

	local tmp = {}
	tmp.Index = terrain.Index
	tmp.Name  = terrain.Name
	tmp.Tiles = {}
	tmp.Maps  = {}
	tmp.Crc32 = UpdateCrc32(0, tmp.Name)

	for k, v in ipairs(terrain.Tiles) do
		local pck_fname = LocateFile(string.gsub(v, "%.[^%.]*$", ".pck"))
		local mcd_fname = LocateFile(string.gsub(v, "%.[^%.]*$", ".mcd"))
		local tab_fname = LocateFile(string.gsub(v, "%.[^%.]*$", ".tab"))
		local pck_data = ReadFile(pck_fname)
		local mcd_data = ReadFile(mcd_fname)
		local tab_data = ReadFile(tab_fname)

		if pck_data and mcd_data and tab_data then
			tmp.Crc32 = UpdateCrc32(tmp.Crc32, pck_data)
			tmp.Crc32 = UpdateCrc32(tmp.Crc32, mcd_data)
			tmp.Crc32 = UpdateCrc32(tmp.Crc32, tab_data)
			tmp.Tiles[k] = pck_fname;
		else
			Warning("AddXcomTerrain: '%s' terrain - FAILED (can't locate '%s', '%s' or '%s')",
				terrain.Name, pck_fname, mcd_fname, tab_fname) 
			return nil
		end
	end

	local number_of_maps = 0
	local errmsg = nil
	for k, v in ipairs(terrain.Maps) do
		errmsg = AddXcomMap(tmp, LocateFile(v))
		if errmsg then
			number_of_maps = 0
			break
		else
			number_of_maps = number_of_maps + 1
		end
	end

	if number_of_maps > 0 then
		TerrainTable[tmp.Index] = tmp
		Message("AddXcomTerrain: '%s' terrain - OK, %d maps, crc32 = %08X",
			tmp.Name, number_of_maps, tmp.Crc32) 
	else
		Warning("AddXcomTerrain: '%s' terrain - FAILED (%s)", tmp.Name, errmsg) 
	end

	return 1
end
